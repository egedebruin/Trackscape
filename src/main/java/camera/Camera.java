package camera;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.video.BackgroundSubtractorKNN;
import org.opencv.video.Video;
import org.opencv.videoio.VideoCapture;

/**
 * Class describing a camera.
 * Camera holds relevant information about data generated by a camera
 */
public class Camera {

    /**
     * Class parameters.
     */
    private List<CameraObject> cameraObjectList;
    private VideoCapture videoCapture;
    private String link;
    private Mat lastFrame = new Mat();
    private boolean changed = false;
    private List<Mat> frameParts = new ArrayList<>();
    private List<List<double[]>> activity;
    private List<BackgroundSubtractorKNN> knns = new ArrayList<>();
    private long firstTime = -1;
    private int frameCounter = 0;
    private final int FRAMES = 4;

    /**
     * Constructor for a Camera.
     *
     * @param newCapture The VideoCapture of this camera.
     * @param newLink    The link of this camera.
     */
    public Camera(final VideoCapture newCapture, final String newLink) {
        cameraObjectList = new ArrayList<>();
        videoCapture = newCapture;
        link = newLink;
        activity = new ArrayList<>();
        for (int i = 0; i < FRAMES; i++) {
            frameParts.add(new Mat());
            activity.add(new ArrayList<>());
            knns.add(Video.createBackgroundSubtractorKNN(1, 1000, false));
        }
        activity.add(new ArrayList<>());
        knns.add(Video.createBackgroundSubtractorKNN(1, 1000, false));
    }

    /**
     * Gets the last known frame of this camera.
     *
     * @return The frame in Mat format.
     */
    public Mat getLastFrame() {
        Mat newFrame = loadFrame();

        if (newFrame != null && newFrame.rows() != 0 && newFrame.cols() != 0) {
            lastFrame = newFrame;
            changed = true;
        } else {
            changed = false;
        }

        divideFrame(newFrame);

        if (frameCounter % 5 == 0) {
            for (int i = 0; i < FRAMES; i++) {
                addActivity(frameParts.get(i), i, knns.get(i));
            }
        }
        addActivity(newFrame, FRAMES, knns.get(FRAMES));
        frameCounter++;

        return lastFrame.clone();
    }

    public void divideFrame(Mat frame) {
        for (int i = 0; i < FRAMES; i++) {
            int midCol = frame.width() / (int) Math.sqrt(FRAMES);
            int midRow = frame.height() / (int) Math.sqrt(FRAMES);

            int col = ((i * midCol) - ((i * midCol) % frame.width())) / (int) Math.sqrt(FRAMES);
            int row = (i * midRow) % frame.height();

            Mat result = frame.colRange(col, col + midCol);
            result = result.rowRange(row, row + midRow);
            frameParts.set(i, result);
        }
    }

    /**
     * Adds an activity to the list of activities.
     *
     * @param frame The frame to get the activity from.
     */
    public void addActivity(final Mat frame, int i, BackgroundSubtractorKNN knn) {
        Mat subtraction = new Mat();
        knn.apply(frame, subtraction);
        Scalar meanValues = Core.mean(subtraction);

        double change = 0;
        for (double v : meanValues.val) {
            change += v;
        }

        if (frameCounter > 30) {
            if (firstTime == -1) {
                firstTime = System.currentTimeMillis();
            }

            long currentTime = System.currentTimeMillis() - firstTime;

            double[] tuple = {currentTime / 1000.00, change};

            activity.get(i).add(tuple);
        }
    }

    /**
     * Reads the videoCapture to load the new frame.
     *
     * @return The new frame in Mat format.
     */
    private Mat loadFrame() {
        Mat loadFrame = new Mat();
        videoCapture.read(loadFrame);
        return loadFrame;
    }

    /**
     * Overriding equals method.
     *
     * @param o the object to be compared
     * @return boolean
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Camera)) {
            return false;
        }
        Camera camera = (Camera) o;
        return Objects.equals(link, camera.link);
    }

    /**
     * Returns if the frame of the camera is changed.
     *
     * @return If frame is changed.
     */
    public boolean isChanged() {
        return changed;
    }

    /**
     * Gets the activity of this camera.
     *
     * @return The activity.
     */
    public List<List<double[]>> getActivity() {
        return activity;
    }
}
